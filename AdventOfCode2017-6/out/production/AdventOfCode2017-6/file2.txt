
import java.util.*;
import java.io.*;

public class Part1 {

    public static void main(String [ ] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\carolina\\Desktop\\AdventOfCode\\AdventOfCode2017-6\\src\\file.txt"));
        String line;
        int count = 0;
        String aux = "";
        int num = 0;
        int j = 0;
        ArrayList<int[]> banks = new ArrayList<>();
        int[] array = new int[16];

        line = br.readLine();

        //para ler do ficheiro e passar para num
        for (int i = 0; i < line.length(); i++) {
            if (line.charAt(i) != ' ' && line.charAt(i) != '\t') {
                aux += line.charAt(i);
            }
            if (i == (line.length() - 1) || ((line.charAt(i) == '\t' || line.charAt(i) == ' ') && aux != "")) {
                num = Integer.parseInt(aux);
                array[j] = num;
                j++;
                aux = "";
            }
        }
        yo:
        while(true) {
            //encontra o maior
            int maior = 0, posM = 0, n = 0;

            for (int i = 0; i < j; i++) {
                if (array[i] >= maior) {
                    maior = array[i];
                    posM = i;
                }
            }
            array[posM] = 0;
            //int index=posM;
            for (int i = 0; i < maior; i++) {
                if (posM == j-1){
                    posM=0;
                }
                else {
                    posM++;
                }
                array[posM]++;

            }

            if(!verificaExiste(banks, array)){
                break yo;
            }
            else{
                banks.add(array);
            }
            count++;
        }
        System.out.println("count="+count);
    }



    static boolean verificaExiste(ArrayList<int[]> banks, int[] array){
        int a=0;
        for (int i=0;i<banks.size();i++){
            for (int j=0; j<banks.get(i).length;j++) {
                if (banks.get(i)[j] == array[j]) {
                    a++;
                } else {
                    break;
                }
                if (a == banks.get(i).length) {
                    return false;
                }
            }
        }
        return true;
    }

    static void imprimeArray(int [] a){
        for (int i=0; i<a.length;i++){
            System.out.print(a[i]+"   ");
        }
        System.out.println();
    }
}
/*
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Part1 {

    private static File uri;
    private static List<String> input;

    private static ArrayList<Integer> memory_banks = new ArrayList<>();

    public static void main(String[] args) {
        try {
            uri = new File(args[0]);
        } catch (ArrayIndexOutOfBoundsException ex) {
            uri = new File("C:\\\\Users\\\\carolina\\\\Desktop\\\\AdventOfCode\\\\AdventOfCode2017-6\\\\src\\\\file.txt"); //Default
        }

        try {
            input = Files.readAllLines(uri.toPath());
        } catch (IOException ex) {
            System.out.println("Error reading file");
        }

        String[] arr_input = input.get(0).split("\t");
        for (String curr : arr_input) {
            memory_banks.add(Integer.parseInt(curr));
        }

        System.out.println("Solution Task 1: " + runTask1());
    }

    private static int runTask1() {
        int cycles = 0;
        ArrayList<int[]> memory_banks_history = new ArrayList<>();

        outerloop:
        do {
            int i = 0;
            int highest_value = 0, highest_value_index = 0;

            for (int curr : memory_banks) {
                if (curr > highest_value) {
                    highest_value = curr;
                    highest_value_index = i;
                }
                i++;
            }

            int index = highest_value_index + 1;
            if (index >= memory_banks.size()) {
                index = 0;
            }
            for (i = 0; i < highest_value; i++) {
                memory_banks.set(highest_value_index, memory_banks.get(highest_value_index) - 1);
                memory_banks.set(index, memory_banks.get(index) + 1);

                if (index >= (memory_banks.size() - 1)) {
                    index = 0;
                } else {
                    index++;
                }
            }

            cycles++;

            ArrayList<Integer> temp = memory_banks;
            int[] temp_arr = new int[temp.size()];
            int ia = 0;
            for (int curr : temp) {
                temp_arr[ia] = curr;
                ia++;
            }

            for (int[] curr : memory_banks_history) {
                if (Arrays.equals(curr, temp_arr)) {
                    break outerloop;
                }
            }

            memory_banks_history.add(temp_arr);
        } while (true);
        return cycles;
    }

}
*/